// Code generated by go-swagger; DO NOT EDIT.

package match

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetNextMatchHandlerFunc turns a function with the right signature into a get next match handler
type GetNextMatchHandlerFunc func(GetNextMatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNextMatchHandlerFunc) Handle(params GetNextMatchParams) middleware.Responder {
	return fn(params)
}

// GetNextMatchHandler interface for that can handle valid get next match params
type GetNextMatchHandler interface {
	Handle(GetNextMatchParams) middleware.Responder
}

// NewGetNextMatch creates a new http.Handler for the get next match operation
func NewGetNextMatch(ctx *middleware.Context, handler GetNextMatchHandler) *GetNextMatch {
	return &GetNextMatch{Context: ctx, Handler: handler}
}

/*GetNextMatch swagger:route GET /v{eventId}/next-match match getNextMatch

次の試合を返す。team_id を指定した場合そのチームの、なければログインしている参加者のチームの 次のマッチをあれば返す。 team_idを指定せず参加者がチームに属して無い場合などはエラー。

*/
type GetNextMatch struct {
	Context *middleware.Context
	Handler GetNextMatchHandler
}

func (o *GetNextMatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNextMatchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
