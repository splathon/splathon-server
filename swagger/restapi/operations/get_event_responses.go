// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/splathon/splathon-server/swagger/models"
)

// GetEventOKCode is the HTTP code returned for type GetEventOK
const GetEventOKCode int = 200

/*GetEventOK Success

swagger:response getEventOK
*/
type GetEventOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewGetEventOK creates GetEventOK with default headers values
func NewGetEventOK() *GetEventOK {

	return &GetEventOK{}
}

// WithPayload adds the payload to the get event o k response
func (o *GetEventOK) WithPayload(payload *models.Event) *GetEventOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get event o k response
func (o *GetEventOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEventOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetEventDefault Generic error

swagger:response getEventDefault
*/
type GetEventDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEventDefault creates GetEventDefault with default headers values
func NewGetEventDefault(code int) *GetEventDefault {
	if code <= 0 {
		code = 500
	}

	return &GetEventDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get event default response
func (o *GetEventDefault) WithStatusCode(code int) *GetEventDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get event default response
func (o *GetEventDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get event default response
func (o *GetEventDefault) WithPayload(payload *models.Error) *GetEventDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get event default response
func (o *GetEventDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEventDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
