// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CompleteReceptionHandlerFunc turns a function with the right signature into a complete reception handler
type CompleteReceptionHandlerFunc func(CompleteReceptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CompleteReceptionHandlerFunc) Handle(params CompleteReceptionParams) middleware.Responder {
	return fn(params)
}

// CompleteReceptionHandler interface for that can handle valid complete reception params
type CompleteReceptionHandler interface {
	Handle(CompleteReceptionParams) middleware.Responder
}

// NewCompleteReception creates a new http.Handler for the complete reception operation
func NewCompleteReception(ctx *middleware.Context, handler CompleteReceptionHandler) *CompleteReception {
	return &CompleteReception{Context: ctx, Handler: handler}
}

/*CompleteReception swagger:route POST /v{eventId}/reception/{splathonReceptionCode}/complete reception admin completeReception

参加登録API

*/
type CompleteReception struct {
	Context *middleware.Context
	Handler CompleteReceptionHandler
}

func (o *CompleteReception) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCompleteReceptionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
