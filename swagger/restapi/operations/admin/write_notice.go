// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WriteNoticeHandlerFunc turns a function with the right signature into a write notice handler
type WriteNoticeHandlerFunc func(WriteNoticeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WriteNoticeHandlerFunc) Handle(params WriteNoticeParams) middleware.Responder {
	return fn(params)
}

// WriteNoticeHandler interface for that can handle valid write notice params
type WriteNoticeHandler interface {
	Handle(WriteNoticeParams) middleware.Responder
}

// NewWriteNotice creates a new http.Handler for the write notice operation
func NewWriteNotice(ctx *middleware.Context, handler WriteNoticeHandler) *WriteNotice {
	return &WriteNotice{Context: ctx, Handler: handler}
}

/*WriteNotice swagger:route POST /v{eventId}/notices admin writeNotice

Insert or update notices. Update if Notice.id is specified.

*/
type WriteNotice struct {
	Context *middleware.Context
	Handler WriteNoticeHandler
}

func (o *WriteNotice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWriteNoticeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
