// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/splathon/splathon-server/swagger/models"
)

// UpdateReceptionOKCode is the HTTP code returned for type UpdateReceptionOK
const UpdateReceptionOKCode int = 200

/*UpdateReceptionOK Success

swagger:response updateReceptionOK
*/
type UpdateReceptionOK struct {
}

// NewUpdateReceptionOK creates UpdateReceptionOK with default headers values
func NewUpdateReceptionOK() *UpdateReceptionOK {

	return &UpdateReceptionOK{}
}

// WriteResponse to the client
func (o *UpdateReceptionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*UpdateReceptionDefault Generic error

swagger:response updateReceptionDefault
*/
type UpdateReceptionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateReceptionDefault creates UpdateReceptionDefault with default headers values
func NewUpdateReceptionDefault(code int) *UpdateReceptionDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateReceptionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update reception default response
func (o *UpdateReceptionDefault) WithStatusCode(code int) *UpdateReceptionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update reception default response
func (o *UpdateReceptionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update reception default response
func (o *UpdateReceptionDefault) WithPayload(payload *models.Error) *UpdateReceptionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update reception default response
func (o *UpdateReceptionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateReceptionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
