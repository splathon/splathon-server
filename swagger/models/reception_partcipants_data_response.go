// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReceptionPartcipantsDataResponse reception partcipants data response
// swagger:model ReceptionPartcipantsDataResponse
type ReceptionPartcipantsDataResponse struct {

	// 受付の仕方の説明や注意点などのフリーテキスト。
	Description string `json:"description,omitempty"`

	// 1つのSlackIDで複数の参加者をカバーしている。また participants とは別に参加者情報のない同伴者が存在する可能性があり、 もしいる場合は has_companion flag が true となる
	Participants []*ParticipantReception `json:"participants"`

	// 参加者の Slack Internal ID
	SLACKInternalID string `json:"slack_internal_id,omitempty"`
}

// Validate validates this reception partcipants data response
func (m *ReceptionPartcipantsDataResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReceptionPartcipantsDataResponse) validateParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	for i := 0; i < len(m.Participants); i++ {
		if swag.IsZero(m.Participants[i]) { // not required
			continue
		}

		if m.Participants[i] != nil {
			if err := m.Participants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReceptionPartcipantsDataResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReceptionPartcipantsDataResponse) UnmarshalBinary(b []byte) error {
	var res ReceptionPartcipantsDataResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
