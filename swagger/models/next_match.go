// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NextMatch next match
// swagger:model NextMatch
type NextMatch struct {

	// match detail
	MatchDetail *Match `json:"match_detail,omitempty"`

	// Room内でのマッチの順番
	MatchOrderInRoom int32 `json:"match_order_in_room,omitempty"`

	// opponent team
	OpponentTeam *Team `json:"opponent_team,omitempty"`

	// own team
	OwnTeam *Team `json:"own_team,omitempty"`

	// room
	Room *NextMatchRoom `json:"room,omitempty"`

	// ラウンド名。e.g. 予選第1ラウンド, 決勝T1回戦, 決勝戦.
	RoundName string `json:"round_name,omitempty"`
}

// Validate validates this next match
func (m *NextMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpponentTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NextMatch) validateMatchDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchDetail) { // not required
		return nil
	}

	if m.MatchDetail != nil {
		if err := m.MatchDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_detail")
			}
			return err
		}
	}

	return nil
}

func (m *NextMatch) validateOpponentTeam(formats strfmt.Registry) error {

	if swag.IsZero(m.OpponentTeam) { // not required
		return nil
	}

	if m.OpponentTeam != nil {
		if err := m.OpponentTeam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opponent_team")
			}
			return err
		}
	}

	return nil
}

func (m *NextMatch) validateOwnTeam(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnTeam) { // not required
		return nil
	}

	if m.OwnTeam != nil {
		if err := m.OwnTeam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("own_team")
			}
			return err
		}
	}

	return nil
}

func (m *NextMatch) validateRoom(formats strfmt.Registry) error {

	if swag.IsZero(m.Room) { // not required
		return nil
	}

	if m.Room != nil {
		if err := m.Room.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("room")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NextMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NextMatch) UnmarshalBinary(b []byte) error {
	var res NextMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NextMatchRoom next match room
// swagger:model NextMatchRoom
type NextMatchRoom struct {

	// Room ID.
	ID int32 `json:"id,omitempty"`

	// Room name. e.g. A卓
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this next match room
func (m *NextMatchRoom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NextMatchRoom) validateName(formats strfmt.Registry) error {

	if err := validate.Required("room"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NextMatchRoom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NextMatchRoom) UnmarshalBinary(b []byte) error {
	var res NextMatchRoom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
