// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Battle バトル。勝敗などは決まってない状態のこともある。
// swagger:model Battle
type Battle struct {

	// Battle ID
	ID int64 `json:"id,omitempty"`

	// 何戦目か
	// Required: true
	Order *int32 `json:"order"`

	// rule
	Rule *Rule `json:"rule,omitempty"`

	// stage
	Stage *Stage `json:"stage,omitempty"`

	// 勝者がどちらか。
	// Enum: [alpha bravo]
	Winner string `json:"winner,omitempty"`
}

// Validate validates this battle
func (m *Battle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWinner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Battle) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

func (m *Battle) validateRule(formats strfmt.Registry) error {

	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

func (m *Battle) validateStage(formats strfmt.Registry) error {

	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	if m.Stage != nil {
		if err := m.Stage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage")
			}
			return err
		}
	}

	return nil
}

var battleTypeWinnerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alpha","bravo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		battleTypeWinnerPropEnum = append(battleTypeWinnerPropEnum, v)
	}
}

const (

	// BattleWinnerAlpha captures enum value "alpha"
	BattleWinnerAlpha string = "alpha"

	// BattleWinnerBravo captures enum value "bravo"
	BattleWinnerBravo string = "bravo"
)

// prop value enum
func (m *Battle) validateWinnerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, battleTypeWinnerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Battle) validateWinner(formats strfmt.Registry) error {

	if swag.IsZero(m.Winner) { // not required
		return nil
	}

	// value enum
	if err := m.validateWinnerEnum("winner", "body", m.Winner); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Battle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Battle) UnmarshalBinary(b []byte) error {
	var res Battle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
