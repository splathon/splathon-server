// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule rule
// swagger:model Rule
type Rule struct {

	// Rule key. ref: https://splatoon2.ink/data/locale/ja.json
	// Required: true
	// Enum: [turf_war splat_zones tower_control rainmaker clam_blitz]
	Key *string `json:"key"`

	// Localized rule name.
	Name string `json:"name,omitempty"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ruleTypeKeyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["turf_war","splat_zones","tower_control","rainmaker","clam_blitz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleTypeKeyPropEnum = append(ruleTypeKeyPropEnum, v)
	}
}

const (

	// RuleKeyTurfWar captures enum value "turf_war"
	RuleKeyTurfWar string = "turf_war"

	// RuleKeySplatZones captures enum value "splat_zones"
	RuleKeySplatZones string = "splat_zones"

	// RuleKeyTowerControl captures enum value "tower_control"
	RuleKeyTowerControl string = "tower_control"

	// RuleKeyRainmaker captures enum value "rainmaker"
	RuleKeyRainmaker string = "rainmaker"

	// RuleKeyClamBlitz captures enum value "clam_blitz"
	RuleKeyClamBlitz string = "clam_blitz"
)

// prop value enum
func (m *Rule) validateKeyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ruleTypeKeyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Rule) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	// value enum
	if err := m.validateKeyEnum("key", "body", *m.Key); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
