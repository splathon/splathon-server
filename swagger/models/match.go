// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Match match
// swagger:model Match
type Match struct {

	// battles
	Battles []*Battle `json:"battles"`

	// Match ID
	// Required: true
	ID *int32 `json:"id"`

	// Room内でのマッチの順番
	Order int32 `json:"order,omitempty"`

	// ラウンド名。e.g. 予選第1ラウンド, 決勝T1回戦, 決勝戦. Match APIから読んだときに埋まっている
	RoundName string `json:"round_name,omitempty"`

	// team alpha
	// Required: true
	TeamAlpha *Team `json:"teamAlpha"`

	// team bravo
	// Required: true
	TeamBravo *Team `json:"teamBravo"`

	// 勝者がどちらか。または引き分け。
	// Enum: [alpha bravo draw]
	Winner string `json:"winner,omitempty"`
}

// Validate validates this match
func (m *Match) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBattles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamAlpha(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamBravo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWinner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Match) validateBattles(formats strfmt.Registry) error {

	if swag.IsZero(m.Battles) { // not required
		return nil
	}

	for i := 0; i < len(m.Battles); i++ {
		if swag.IsZero(m.Battles[i]) { // not required
			continue
		}

		if m.Battles[i] != nil {
			if err := m.Battles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("battles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Match) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateTeamAlpha(formats strfmt.Registry) error {

	if err := validate.Required("teamAlpha", "body", m.TeamAlpha); err != nil {
		return err
	}

	if m.TeamAlpha != nil {
		if err := m.TeamAlpha.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teamAlpha")
			}
			return err
		}
	}

	return nil
}

func (m *Match) validateTeamBravo(formats strfmt.Registry) error {

	if err := validate.Required("teamBravo", "body", m.TeamBravo); err != nil {
		return err
	}

	if m.TeamBravo != nil {
		if err := m.TeamBravo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teamBravo")
			}
			return err
		}
	}

	return nil
}

var matchTypeWinnerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alpha","bravo","draw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		matchTypeWinnerPropEnum = append(matchTypeWinnerPropEnum, v)
	}
}

const (

	// MatchWinnerAlpha captures enum value "alpha"
	MatchWinnerAlpha string = "alpha"

	// MatchWinnerBravo captures enum value "bravo"
	MatchWinnerBravo string = "bravo"

	// MatchWinnerDraw captures enum value "draw"
	MatchWinnerDraw string = "draw"
)

// prop value enum
func (m *Match) validateWinnerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, matchTypeWinnerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Match) validateWinner(formats strfmt.Registry) error {

	if swag.IsZero(m.Winner) { // not required
		return nil
	}

	// value enum
	if err := m.validateWinnerEnum("winner", "body", m.Winner); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Match) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Match) UnmarshalBinary(b []byte) error {
	var res Match
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
