// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Reception reception
// swagger:model Reception
type Reception struct {

	// created at timestamp sec
	// Required: true
	CreatedAtTimestampSec *int64 `json:"created_at_timestamp_sec"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// memo
	Memo string `json:"memo,omitempty"`

	// participant id
	// Required: true
	ParticipantID *int64 `json:"participant_id"`

	// updated at timestamp sec
	// Required: true
	UpdatedAtTimestampSec *int64 `json:"updated_at_timestamp_sec"`
}

// Validate validates this reception
func (m *Reception) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAtTimestampSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAtTimestampSec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reception) validateCreatedAtTimestampSec(formats strfmt.Registry) error {

	if err := validate.Required("created_at_timestamp_sec", "body", m.CreatedAtTimestampSec); err != nil {
		return err
	}

	return nil
}

func (m *Reception) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Reception) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participant_id", "body", m.ParticipantID); err != nil {
		return err
	}

	return nil
}

func (m *Reception) validateUpdatedAtTimestampSec(formats strfmt.Registry) error {

	if err := validate.Required("updated_at_timestamp_sec", "body", m.UpdatedAtTimestampSec); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reception) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reception) UnmarshalBinary(b []byte) error {
	var res Reception
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
