// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewMatchRequest new match request
// swagger:model NewMatchRequest
type NewMatchRequest struct {

	// alpha team id
	// Required: true
	AlphaTeamID *int64 `json:"alpha_team_id"`

	// bravo team id
	// Required: true
	BravoTeamID *int64 `json:"bravo_team_id"`

	// Match order in this room.
	// Required: true
	OrderInRoom *int32 `json:"order_in_room"`

	// room id
	// Required: true
	RoomID *int64 `json:"room_id"`
}

// Validate validates this new match request
func (m *NewMatchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlphaTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBravoTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderInRoom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewMatchRequest) validateAlphaTeamID(formats strfmt.Registry) error {

	if err := validate.Required("alpha_team_id", "body", m.AlphaTeamID); err != nil {
		return err
	}

	return nil
}

func (m *NewMatchRequest) validateBravoTeamID(formats strfmt.Registry) error {

	if err := validate.Required("bravo_team_id", "body", m.BravoTeamID); err != nil {
		return err
	}

	return nil
}

func (m *NewMatchRequest) validateOrderInRoom(formats strfmt.Registry) error {

	if err := validate.Required("order_in_room", "body", m.OrderInRoom); err != nil {
		return err
	}

	return nil
}

func (m *NewMatchRequest) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", m.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewMatchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewMatchRequest) UnmarshalBinary(b []byte) error {
	var res NewMatchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
